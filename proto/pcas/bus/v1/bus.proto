syntax = "proto3";

package pcas.bus.v1;

import "pcas/events/v1/event.proto";

option go_package = "github.com/soaringjerry/pcas/gen/go/pcas/bus/v1;busv1";

// EventBusService provides methods for publishing events to the PCAS event bus
service EventBusService {
  // Publish sends an event to the event bus
  rpc Publish(pcas.events.v1.Event) returns (PublishResponse);
  
  // Subscribe allows clients to receive a stream of events
  rpc Subscribe(SubscribeRequest) returns (stream pcas.events.v1.Event);
  
  // Search performs semantic search on stored events
  rpc Search(SearchRequest) returns (SearchResponse);
}

// PublishResponse is the response from publishing an event
message PublishResponse {
  // Empty for now, but reserved for future use (e.g., acknowledgment ID, status)
}

// SubscribeRequest is the request for subscribing to the event stream
message SubscribeRequest {
  // Unique identifier for the client subscribing to events
  string client_id = 1;
}

// SearchRequest is the request for semantic search
message SearchRequest {
  // The natural language query text
  string query_text = 1;
  
  // Number of top results to return (default: 5)
  int32 top_k = 2;
  
  // Optional user ID to filter results by
  string user_id = 3;
}

// SearchResponse is the response from semantic search
message SearchResponse {
  // The matching events found
  repeated pcas.events.v1.Event events = 1;
  
  // Similarity scores corresponding to each event (0.0 to 1.0)
  repeated float scores = 2;
}