// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pcas/bus/v1/bus.proto

package busv1

import (
	context "context"
	v1 "github.com/soaringjerry/pcas/gen/go/pcas/events/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventBusService_Publish_FullMethodName = "/pcas.bus.v1.EventBusService/Publish"
)

// EventBusServiceClient is the client API for EventBusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EventBusService provides methods for publishing events to the PCAS event bus
type EventBusServiceClient interface {
	// Publish sends an event to the event bus
	Publish(ctx context.Context, in *v1.Event, opts ...grpc.CallOption) (*PublishResponse, error)
}

type eventBusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventBusServiceClient(cc grpc.ClientConnInterface) EventBusServiceClient {
	return &eventBusServiceClient{cc}
}

func (c *eventBusServiceClient) Publish(ctx context.Context, in *v1.Event, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, EventBusService_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventBusServiceServer is the server API for EventBusService service.
// All implementations must embed UnimplementedEventBusServiceServer
// for forward compatibility.
//
// EventBusService provides methods for publishing events to the PCAS event bus
type EventBusServiceServer interface {
	// Publish sends an event to the event bus
	Publish(context.Context, *v1.Event) (*PublishResponse, error)
	mustEmbedUnimplementedEventBusServiceServer()
}

// UnimplementedEventBusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventBusServiceServer struct{}

func (UnimplementedEventBusServiceServer) Publish(context.Context, *v1.Event) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedEventBusServiceServer) mustEmbedUnimplementedEventBusServiceServer() {}
func (UnimplementedEventBusServiceServer) testEmbeddedByValue()                         {}

// UnsafeEventBusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventBusServiceServer will
// result in compilation errors.
type UnsafeEventBusServiceServer interface {
	mustEmbedUnimplementedEventBusServiceServer()
}

func RegisterEventBusServiceServer(s grpc.ServiceRegistrar, srv EventBusServiceServer) {
	// If the following call pancis, it indicates UnimplementedEventBusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventBusService_ServiceDesc, srv)
}

func _EventBusService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventBusService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServiceServer).Publish(ctx, req.(*v1.Event))
	}
	return interceptor(ctx, in, info, handler)
}

// EventBusService_ServiceDesc is the grpc.ServiceDesc for EventBusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventBusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pcas.bus.v1.EventBusService",
	HandlerType: (*EventBusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _EventBusService_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pcas/bus/v1/bus.proto",
}
