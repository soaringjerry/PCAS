// 指定我们使用 proto3 语法。

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pcas/events/v1/event.proto

// 定义包名，用于避免命名冲突，并在生成的代码中使用。

package eventsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PCAS 的核心事件信封 —— 与 CloudEvents v1.0 兼容。
// 这是流经整个PCAS事件总线的所有事件的统一结构。
type Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID: 事件的唯一标识符。
	// 在运行时必须非空 (MUST be non-empty)。
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Source: 事件发生的上下文标识。
	// 通常是一个URI，例如 "/d-app/com.wechat.connector"。
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// SpecVersion: 事件所遵循的CloudEvents规范版本。
	// 对于此版本，恒为 "1.0"。
	Specversion string `protobuf:"bytes,3,opt,name=specversion,proto3" json:"specversion,omitempty"`
	// Type: 描述与源事件相关的事件类型。
	// 采用反向域名表示法，例如 "pcas.dapp.message.received.v1"。
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// DataContentType: "data"属性的内容类型。
	// 可选字段。例如 "application/json", "application/protobuf"。
	Datacontenttype string `protobuf:"bytes,5,opt,name=datacontenttype,proto3" json:"datacontenttype,omitempty"`
	// DataSchema: "data"属性所遵循的schema的URI。
	// 可选字段。
	Dataschema string `protobuf:"bytes,6,opt,name=dataschema,proto3" json:"dataschema,omitempty"`
	// Subject: 在事件生产者上下文中，事件主体的描述。
	// 可选字段。
	Subject string `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
	// Time: 事件生成的时间戳。
	// 强烈建议设置 (SHOULD be set)；如果缺失，事件总线将自动填充为当前时间。
	Time *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=time,proto3" json:"time,omitempty"`
	// TraceID: 用于在整个因果链中追踪事件的相关性ID。
	TraceId string `protobuf:"bytes,9,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// UserID: 事件的用户上下文。对未来的多用户系统至关重要。
	UserId string `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// SessionID: 用于将一系列相关事件分组的逻辑会话ID。
	// 可选字段。
	SessionId string `protobuf:"bytes,11,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// CorrelationID: 标识直接的"请求-响应"关系。
	// 例如，响应事件的 correlation_id 应该等于触发它的原始事件的 id。
	CorrelationId string `protobuf:"bytes,12,opt,name=correlation_id,json=correlationId,proto3" json:"correlation_id,omitempty"`
	// Data: 事件的载荷。
	// `Any` 类型允许我们嵌入任何其他Protobuf消息，
	// 这使得事件信封具有高度的可扩展性和类型安全性。
	// 使用100号是为了给未来的核心扩展属性留出充足空间。
	Data          *anypb.Any `protobuf:"bytes,100,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_pcas_events_v1_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_pcas_events_v1_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_pcas_events_v1_event_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Event) GetSpecversion() string {
	if x != nil {
		return x.Specversion
	}
	return ""
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetDatacontenttype() string {
	if x != nil {
		return x.Datacontenttype
	}
	return ""
}

func (x *Event) GetDataschema() string {
	if x != nil {
		return x.Dataschema
	}
	return ""
}

func (x *Event) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Event) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Event) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *Event) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Event) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Event) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *Event) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

// EventVectorizedV1 表示一个向量化事件的数据载荷。
// 当为原始事件生成嵌入向量后，会创建一个新的事件来存储这个向量信息。
type EventVectorizedV1 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 原始事件的ID
	OriginalEventId string `protobuf:"bytes,1,opt,name=original_event_id,json=originalEventId,proto3" json:"original_event_id,omitempty"`
	// 事件的嵌入向量
	Embedding     []float32 `protobuf:"fixed32,2,rep,packed,name=embedding,proto3" json:"embedding,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventVectorizedV1) Reset() {
	*x = EventVectorizedV1{}
	mi := &file_pcas_events_v1_event_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventVectorizedV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventVectorizedV1) ProtoMessage() {}

func (x *EventVectorizedV1) ProtoReflect() protoreflect.Message {
	mi := &file_pcas_events_v1_event_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventVectorizedV1.ProtoReflect.Descriptor instead.
func (*EventVectorizedV1) Descriptor() ([]byte, []int) {
	return file_pcas_events_v1_event_proto_rawDescGZIP(), []int{1}
}

func (x *EventVectorizedV1) GetOriginalEventId() string {
	if x != nil {
		return x.OriginalEventId
	}
	return ""
}

func (x *EventVectorizedV1) GetEmbedding() []float32 {
	if x != nil {
		return x.Embedding
	}
	return nil
}

var File_pcas_events_v1_event_proto protoreflect.FileDescriptor

const file_pcas_events_v1_event_proto_rawDesc = "" +
	"\n" +
	"\x1apcas/events/v1/event.proto\x12\x0epcas.events.v1\x1a\x19google/protobuf/any.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xa3\x03\n" +
	"\x05Event\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06source\x18\x02 \x01(\tR\x06source\x12 \n" +
	"\vspecversion\x18\x03 \x01(\tR\vspecversion\x12\x12\n" +
	"\x04type\x18\x04 \x01(\tR\x04type\x12(\n" +
	"\x0fdatacontenttype\x18\x05 \x01(\tR\x0fdatacontenttype\x12\x1e\n" +
	"\n" +
	"dataschema\x18\x06 \x01(\tR\n" +
	"dataschema\x12\x18\n" +
	"\asubject\x18\a \x01(\tR\asubject\x12.\n" +
	"\x04time\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12\x19\n" +
	"\btrace_id\x18\t \x01(\tR\atraceId\x12\x17\n" +
	"\auser_id\x18\n" +
	" \x01(\tR\x06userId\x12\x1d\n" +
	"\n" +
	"session_id\x18\v \x01(\tR\tsessionId\x12%\n" +
	"\x0ecorrelation_id\x18\f \x01(\tR\rcorrelationId\x12(\n" +
	"\x04data\x18d \x01(\v2\x14.google.protobuf.AnyR\x04dataJ\x04\b\r\x10\x14\"]\n" +
	"\x11EventVectorizedV1\x12*\n" +
	"\x11original_event_id\x18\x01 \x01(\tR\x0foriginalEventId\x12\x1c\n" +
	"\tembedding\x18\x02 \x03(\x02R\tembeddingB\xb7\x01\n" +
	"\x12com.pcas.events.v1B\n" +
	"EventProtoP\x01Z;github.com/soaringjerry/pcas/gen/go/pcas/events/v1;eventsv1\xa2\x02\x03PEX\xaa\x02\x0ePcas.Events.V1\xca\x02\x0ePcas\\Events\\V1\xe2\x02\x1aPcas\\Events\\V1\\GPBMetadata\xea\x02\x10Pcas::Events::V1b\x06proto3"

var (
	file_pcas_events_v1_event_proto_rawDescOnce sync.Once
	file_pcas_events_v1_event_proto_rawDescData []byte
)

func file_pcas_events_v1_event_proto_rawDescGZIP() []byte {
	file_pcas_events_v1_event_proto_rawDescOnce.Do(func() {
		file_pcas_events_v1_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pcas_events_v1_event_proto_rawDesc), len(file_pcas_events_v1_event_proto_rawDesc)))
	})
	return file_pcas_events_v1_event_proto_rawDescData
}

var file_pcas_events_v1_event_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pcas_events_v1_event_proto_goTypes = []any{
	(*Event)(nil),                 // 0: pcas.events.v1.Event
	(*EventVectorizedV1)(nil),     // 1: pcas.events.v1.EventVectorizedV1
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
	(*anypb.Any)(nil),             // 3: google.protobuf.Any
}
var file_pcas_events_v1_event_proto_depIdxs = []int32{
	2, // 0: pcas.events.v1.Event.time:type_name -> google.protobuf.Timestamp
	3, // 1: pcas.events.v1.Event.data:type_name -> google.protobuf.Any
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pcas_events_v1_event_proto_init() }
func file_pcas_events_v1_event_proto_init() {
	if File_pcas_events_v1_event_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pcas_events_v1_event_proto_rawDesc), len(file_pcas_events_v1_event_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pcas_events_v1_event_proto_goTypes,
		DependencyIndexes: file_pcas_events_v1_event_proto_depIdxs,
		MessageInfos:      file_pcas_events_v1_event_proto_msgTypes,
	}.Build()
	File_pcas_events_v1_event_proto = out.File
	file_pcas_events_v1_event_proto_goTypes = nil
	file_pcas_events_v1_event_proto_depIdxs = nil
}
